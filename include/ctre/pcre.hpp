#ifndef CTRE__PCRE__HPP
#define CTRE__PCRE__HPP

// THIS FILE WAS GENERATED BY DESATOMAT TOOL, DO NOT MODIFY THIS FILE

namespace ctre {

struct pcre {

struct _subject_type {};


// NONTERMINALS:
	struct s {}; using _start = s;
	struct a {};
	struct alt2 {};
	struct alt {};
	struct altb {};
	struct atom {};
	struct atom_repeat {};
	struct b {};
	struct backslash {};
	struct backslash_char {};
	struct block {};
	struct c {};
	struct character {};
	struct character_class {};
	struct d {};
	struct e {};
	struct f {};
	struct g {};
	struct h {};
	struct mod {};
	struct nonchar {};
	struct number2 {};
	struct number {};
	struct range {};
	struct repeat {};
	struct set2 {};
	struct set {};
	struct setitem {};
	struct special {};
	struct string2 {};
	struct string {};

// 'action' types:
	struct addchar: ctre::action {};
	struct alternate: ctre::action {};
	struct any: ctre::action {};
	struct backa: ctre::action {};
	struct backb: ctre::action {};
	struct class_digit: ctre::action {};
	struct create_sequence: ctre::action {};
	struct digit: ctre::action {};
	struct empty: ctre::action {};
	struct hdigit: ctre::action {};
	struct hexdec2: ctre::action {};
	struct hexdec4: ctre::action {};
	struct insert_begin: ctre::action {};
	struct insert_end: ctre::action {};
	struct insert_number: ctre::action {};
	struct insert_range: ctre::action {};
	struct make_catch: ctre::action {};
	struct nongreedy: ctre::action {};
	struct octal3: ctre::action {};
	struct odigit: ctre::action {};
	struct optional: ctre::action {};
	struct plus: ctre::action {};
	struct possessive: ctre::action {};
	struct repeat_ab: ctre::action {};
	struct repeat_at_least: ctre::action {};
	struct repeat_exactly: ctre::action {};
	struct set_combine: ctre::action {};
	struct set_finish: ctre::action {};
	struct set_neg_start: ctre::action {};
	struct star: ctre::action {};

// (q)LL1 function:
	using _others = ctre::neg_set<'$','(',')','*','+',',','-','.',':','?','A','B','C','D','E','F','X','[','\\',']','^','0','a','b','c','d','e','f','x','{','|','}','1','2','3','4','5','6','7','8','9'>;
	static constexpr auto rule(s, ctre::epsilon) -> ctre::epsilon; //1
	static constexpr auto rule(s, ctre::set<',','-',':','A','B','C','D','E','F','X',']','a','b','c','d','e','f','x','0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<addchar, ctre::anything, repeat, string2, alt2>; //28
	static constexpr auto rule(s, _others) -> ctre::push<addchar, ctre::anything, repeat, string2, alt2>; //1
	static constexpr auto rule(s, ctre::term<'.'>) -> ctre::push<ctre::anything, any, repeat, string2, alt2>; //1
	static constexpr auto rule(s, ctre::term<'\\'>) -> ctre::push<ctre::anything, b, repeat, string2, alt2>; //1
	static constexpr auto rule(s, ctre::term<'('>) -> ctre::push<ctre::anything, c, repeat, string2, alt2>; //1
	static constexpr auto rule(s, ctre::term<'['>) -> ctre::push<ctre::anything, d, repeat, string2, alt2>; //1
	static constexpr auto rule(s, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, alt2>; //1
	static constexpr auto rule(s, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, alt2>; //1
	static constexpr auto rule(s, ctre::set<')','*','+','?','{','|','}'>) -> ctre::reject; //7

	static constexpr auto rule(a, ctre::term<','>) -> ctre::push<ctre::anything, h>; //1
	static constexpr auto rule(a, ctre::term<'}'>) -> ctre::push<repeat_exactly, ctre::anything>; //1

	static constexpr auto rule(alt2, ctre::term<')'>) -> ctre::epsilon; //1
	static constexpr auto rule(alt2, ctre::epsilon) -> ctre::epsilon; //1
	static constexpr auto rule(alt2, ctre::term<'|'>) -> ctre::push<ctre::anything, alt, alternate>; //1

	static constexpr auto rule(alt, ctre::set<',','-',':','A','B','C','D','E','F','X',']','a','b','c','d','e','f','x','0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<addchar, ctre::anything, repeat, string2, alt2>; //28
	static constexpr auto rule(alt, _others) -> ctre::push<addchar, ctre::anything, repeat, string2, alt2>; //1
	static constexpr auto rule(alt, ctre::term<'.'>) -> ctre::push<ctre::anything, any, repeat, string2, alt2>; //1
	static constexpr auto rule(alt, ctre::term<'\\'>) -> ctre::push<ctre::anything, b, repeat, string2, alt2>; //1
	static constexpr auto rule(alt, ctre::term<'('>) -> ctre::push<ctre::anything, c, repeat, string2, alt2>; //1
	static constexpr auto rule(alt, ctre::term<'['>) -> ctre::push<ctre::anything, d, repeat, string2, alt2>; //1
	static constexpr auto rule(alt, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, alt2>; //1
	static constexpr auto rule(alt, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, alt2>; //1
	static constexpr auto rule(alt, ctre::set<')','*','+','?','{','|','}'>) -> ctre::reject; //7

	static constexpr auto rule(altb, ctre::set<',','-',':','A','B','C','D','E','F','X',']','a','b','c','d','e','f','x','0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<addchar, ctre::anything, repeat, string2, alt2>; //28
	static constexpr auto rule(altb, _others) -> ctre::push<addchar, ctre::anything, repeat, string2, alt2>; //1
	static constexpr auto rule(altb, ctre::term<'.'>) -> ctre::push<ctre::anything, any, repeat, string2, alt2>; //1
	static constexpr auto rule(altb, ctre::term<'\\'>) -> ctre::push<ctre::anything, b, repeat, string2, alt2>; //1
	static constexpr auto rule(altb, ctre::term<'('>) -> ctre::push<ctre::anything, c, repeat, string2, alt2>; //1
	static constexpr auto rule(altb, ctre::term<'['>) -> ctre::push<ctre::anything, d, repeat, string2, alt2>; //1
	static constexpr auto rule(altb, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, alt2>; //1
	static constexpr auto rule(altb, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, alt2>; //1
	static constexpr auto rule(altb, ctre::term<')'>) -> ctre::push<empty>; //1
	static constexpr auto rule(altb, ctre::set<'*','+','?','{','|','}'>) -> ctre::reject; //6

	static constexpr auto rule(b, ctre::term<'a'>) -> ctre::push<ctre::anything, backa>; //1
	static constexpr auto rule(b, ctre::term<'d'>) -> ctre::push<ctre::anything, class_digit>; //1
	static constexpr auto rule(b, ctre::term<'x'>) -> ctre::push<ctre::anything, g>; //1
	static constexpr auto rule(b, ctre::term<'0'>) -> ctre::push<ctre::anything, odigit, ctre::set<'0','1','2','3','4','5','6','7'>, odigit, ctre::set<'0','1','2','3','4','5','6','7'>, odigit, ctre::set<'0','1','2','3','4','5','6','7'>, octal3>; //1
	static constexpr auto rule(b, ctre::set<'$','(',')','*','+','.','?','[','\\','^','{','|','}'>) -> ctre::push<ctre::anything>; //13

	static constexpr auto rule(c, ctre::set<',','-',':','A','B','C','D','E','F','X',']','a','b','c','d','e','f','x','0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<addchar, ctre::anything, repeat, string2, alt2, make_catch, ctre::term<')'>>; //28
	static constexpr auto rule(c, _others) -> ctre::push<addchar, ctre::anything, repeat, string2, alt2, make_catch, ctre::term<')'>>; //1
	static constexpr auto rule(c, ctre::term<'.'>) -> ctre::push<ctre::anything, any, repeat, string2, alt2, make_catch, ctre::term<')'>>; //1
	static constexpr auto rule(c, ctre::term<'\\'>) -> ctre::push<ctre::anything, b, repeat, string2, alt2, make_catch, ctre::term<')'>>; //1
	static constexpr auto rule(c, ctre::term<'('>) -> ctre::push<ctre::anything, c, repeat, string2, alt2, make_catch, ctre::term<')'>>; //1
	static constexpr auto rule(c, ctre::term<'?'>) -> ctre::push<ctre::anything, ctre::term<':'>, altb, ctre::term<')'>>; //1
	static constexpr auto rule(c, ctre::term<'['>) -> ctre::push<ctre::anything, d, repeat, string2, alt2, make_catch, ctre::term<')'>>; //1
	static constexpr auto rule(c, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, alt2, make_catch, ctre::term<')'>>; //1
	static constexpr auto rule(c, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, alt2, make_catch, ctre::term<')'>>; //1
	static constexpr auto rule(c, ctre::term<')'>) -> ctre::push<empty, make_catch, ctre::anything>; //1
	static constexpr auto rule(c, ctre::set<'*','+','{','|','}'>) -> ctre::reject; //5

	static constexpr auto rule(d, ctre::set<'0','.',':','A','B','C','D','E','F','X','a','b','c','d','e','f','x','1','2','3','4','5','6','7','8','9'>) -> ctre::push<addchar, ctre::anything, range, set2, ctre::term<']'>, set_finish>; //26
	static constexpr auto rule(d, _others) -> ctre::push<addchar, ctre::anything, range, set2, ctre::term<']'>, set_finish>; //1
	static constexpr auto rule(d, ctre::term<'\\'>) -> ctre::push<ctre::anything, e, set2, ctre::term<']'>, set_finish>; //1
	static constexpr auto rule(d, ctre::term<'^'>) -> ctre::push<ctre::anything, set_neg_start, set, ctre::term<']'>, set_finish>; //1
	static constexpr auto rule(d, ctre::set<'$','(',')','*','+',',','-','?','[',']','{','|','}'>) -> ctre::reject; //13

	static constexpr auto rule(e, ctre::term<'a'>) -> ctre::push<ctre::anything, backa>; //1
	static constexpr auto rule(e, ctre::term<'b'>) -> ctre::push<ctre::anything, backb>; //1
	static constexpr auto rule(e, ctre::term<'x'>) -> ctre::push<ctre::anything, g>; //1
	static constexpr auto rule(e, ctre::term<'0'>) -> ctre::push<ctre::anything, odigit, ctre::set<'0','1','2','3','4','5','6','7'>, odigit, ctre::set<'0','1','2','3','4','5','6','7'>, odigit, ctre::set<'0','1','2','3','4','5','6','7'>, octal3>; //1
	static constexpr auto rule(e, ctre::set<'$','(',')','*','+','.','?','[','\\','^','{','|','}'>) -> ctre::push<ctre::anything>; //13

	static constexpr auto rule(f, ctre::set<'0',':','A','B','C','D','E','F','X','a','b','c','d','e','f','x','1','2','3','4','5','6','7','8','9'>) -> ctre::push<insert_range, ctre::anything>; //25
	static constexpr auto rule(f, _others) -> ctre::push<insert_range, ctre::anything>; //1
	static constexpr auto rule(f, ctre::set<'$','(',')','*','+',',','-','.','?','[','\\',']','^','{','|','}'>) -> ctre::reject; //16

	static constexpr auto rule(g, ctre::term<'{'>) -> ctre::push<ctre::anything, hdigit, ctre::set<'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'>, hdigit, ctre::set<'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'>, hdigit, ctre::set<'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'>, hdigit, ctre::set<'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'>, ctre::term<'}'>, hexdec4>; //1
	static constexpr auto rule(g, ctre::set<'0','A','B','C','D','E','F','a','b','c','d','e','f','1','2','3','4','5','6','7','8','9'>) -> ctre::push<hdigit, ctre::anything, hdigit, ctre::set<'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'>, hexdec2>; //22

	static constexpr auto rule(h, ctre::set<'0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<digit, ctre::anything, number2, insert_number, repeat_ab, ctre::term<'}'>, mod>; //10
	static constexpr auto rule(h, ctre::term<'}'>) -> ctre::push<repeat_at_least, ctre::anything, mod>; //1

	static constexpr auto rule(mod, ctre::set<'$','(',')',',','-','.',':','A','B','C','D','E','F','X','[','\\',']','^','a','b','c','d','e','f','x','|','0','1','2','3','4','5','6','7','8','9'>) -> ctre::epsilon; //36
	static constexpr auto rule(mod, ctre::epsilon) -> ctre::epsilon; //1
	static constexpr auto rule(mod, _others) -> ctre::epsilon; //1
	static constexpr auto rule(mod, ctre::term<'?'>) -> ctre::push<ctre::anything, nongreedy>; //1
	static constexpr auto rule(mod, ctre::term<'+'>) -> ctre::push<ctre::anything, possessive>; //1
	static constexpr auto rule(mod, ctre::set<'*','{','}'>) -> ctre::reject; //3

	static constexpr auto rule(number2, ctre::set<',','}'>) -> ctre::epsilon; //2
	static constexpr auto rule(number2, ctre::set<'0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<digit, ctre::anything, number2>; //10

	static constexpr auto rule(number, ctre::set<'0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<digit, ctre::anything, number2, insert_number>; //10

	static constexpr auto rule(range, ctre::set<'.',':','0','A','B','C','D','E','F','X','\\',']','a','b','c','d','e','f','x','1','2','3','4','5','6','7','8','9'>) -> ctre::epsilon; //28
	static constexpr auto rule(range, ctre::epsilon) -> ctre::epsilon; //1
	static constexpr auto rule(range, _others) -> ctre::epsilon; //1
	static constexpr auto rule(range, ctre::term<'-'>) -> ctre::push<ctre::anything, f>; //1
	static constexpr auto rule(range, ctre::set<'$','(',')','*','+',',','?','[','^','{','|','}'>) -> ctre::reject; //12

	static constexpr auto rule(repeat, ctre::set<'$','(',')',',','-','.',':','A','B','C','D','E','F','X','[','\\',']','^','a','b','c','d','e','f','x','|','0','1','2','3','4','5','6','7','8','9'>) -> ctre::epsilon; //36
	static constexpr auto rule(repeat, ctre::epsilon) -> ctre::epsilon; //1
	static constexpr auto rule(repeat, _others) -> ctre::epsilon; //1
	static constexpr auto rule(repeat, ctre::term<'{'>) -> ctre::push<ctre::anything, number, a>; //1
	static constexpr auto rule(repeat, ctre::term<'?'>) -> ctre::push<ctre::anything, optional, mod>; //1
	static constexpr auto rule(repeat, ctre::term<'+'>) -> ctre::push<ctre::anything, plus, mod>; //1
	static constexpr auto rule(repeat, ctre::term<'*'>) -> ctre::push<ctre::anything, star, mod>; //1
	static constexpr auto rule(repeat, ctre::term<'}'>) -> ctre::reject; //1

	static constexpr auto rule(set2, ctre::term<']'>) -> ctre::epsilon; //1
	static constexpr auto rule(set2, ctre::set<'0','.',':','A','B','C','D','E','F','X','a','b','c','d','e','f','x','1','2','3','4','5','6','7','8','9'>) -> ctre::push<addchar, ctre::anything, range, set_combine, set2>; //26
	static constexpr auto rule(set2, _others) -> ctre::push<addchar, ctre::anything, range, set_combine, set2>; //1
	static constexpr auto rule(set2, ctre::term<'\\'>) -> ctre::push<ctre::anything, e, set_combine, set2>; //1
	static constexpr auto rule(set2, ctre::set<'$','(',')','*','+',',','-','?','[','^','{','|','}'>) -> ctre::reject; //13

	static constexpr auto rule(set, ctre::set<'0','.',':','A','B','C','D','E','F','X','a','b','c','d','e','f','x','1','2','3','4','5','6','7','8','9'>) -> ctre::push<addchar, ctre::anything, range, set2>; //26
	static constexpr auto rule(set, _others) -> ctre::push<addchar, ctre::anything, range, set2>; //1
	static constexpr auto rule(set, ctre::term<'\\'>) -> ctre::push<ctre::anything, e, set2>; //1
	static constexpr auto rule(set, ctre::set<'$','(',')','*','+',',','-','?','[',']','^','{','|','}'>) -> ctre::reject; //14

	static constexpr auto rule(string2, ctre::set<')','|'>) -> ctre::epsilon; //2
	static constexpr auto rule(string2, ctre::epsilon) -> ctre::epsilon; //1
	static constexpr auto rule(string2, ctre::set<',','-',':','A','B','C','D','E','F','X',']','a','b','c','d','e','f','x','0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<addchar, ctre::anything, repeat, string2, create_sequence>; //28
	static constexpr auto rule(string2, _others) -> ctre::push<addchar, ctre::anything, repeat, string2, create_sequence>; //1
	static constexpr auto rule(string2, ctre::term<'.'>) -> ctre::push<ctre::anything, any, repeat, string2, create_sequence>; //1
	static constexpr auto rule(string2, ctre::term<'\\'>) -> ctre::push<ctre::anything, b, repeat, string2, create_sequence>; //1
	static constexpr auto rule(string2, ctre::term<'('>) -> ctre::push<ctre::anything, c, repeat, string2, create_sequence>; //1
	static constexpr auto rule(string2, ctre::term<'['>) -> ctre::push<ctre::anything, d, repeat, string2, create_sequence>; //1
	static constexpr auto rule(string2, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, create_sequence>; //1
	static constexpr auto rule(string2, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, create_sequence>; //1
	static constexpr auto rule(string2, ctre::set<'*','+','?','{','}'>) -> ctre::reject; //5

};

}

#endif //CTRE__PCRE__HPP
