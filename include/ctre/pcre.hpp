#ifndef CTRE__PCRE__HPP
#define CTRE__PCRE__HPP

// THIS FILE WAS GENERATED BY DESATOMAT TOOL, DO NOT MODIFY THIS FILE

namespace ctre {

struct pcre {

struct _subject_type {};


// NONTERMINALS:
	struct a {};
	struct b {};
	struct backslash {};
	struct block_name2 {};
	struct block_name {};
	struct c {};
	struct class_named_name {};
	struct content2 {};
	struct content {};
	struct content_in_capture {};
	struct d {};
	struct e {};
	struct f {};
	struct g {};
	struct h {};
	struct hexdec_repeat {};
	struct i {};
	struct j {};
	struct k {};
	struct mod {};
	struct number2 {};
	struct number {};
	struct range {};
	struct repeat {};
	struct s {}; using _start = s;
	struct set2 {};
	struct set {};
	struct string2 {};

// 'action' types:
	struct character_alarm: ctre::action {};
	struct character_escape: ctre::action {};
	struct character_formfeed: ctre::action {};
	struct character_newline: ctre::action {};
	struct character_null: ctre::action {};
	struct character_return_carriage: ctre::action {};
	struct character_tab: ctre::action {};
	struct class_digit: ctre::action {};
	struct class_named_alnum: ctre::action {};
	struct class_named_alpha: ctre::action {};
	struct class_named_ascii: ctre::action {};
	struct class_named_blank: ctre::action {};
	struct class_named_cntrl: ctre::action {};
	struct class_named_digit: ctre::action {};
	struct class_named_graph: ctre::action {};
	struct class_named_lower: ctre::action {};
	struct class_named_print: ctre::action {};
	struct class_named_punct: ctre::action {};
	struct class_named_space: ctre::action {};
	struct class_named_upper: ctre::action {};
	struct class_named_word: ctre::action {};
	struct class_named_xdigit: ctre::action {};
	struct class_nondigit: ctre::action {};
	struct class_nonnewline: ctre::action {};
	struct class_nonspace: ctre::action {};
	struct class_nonword: ctre::action {};
	struct class_space: ctre::action {};
	struct class_word: ctre::action {};
	struct create_hexdec: ctre::action {};
	struct create_number: ctre::action {};
	struct empty: ctre::action {};
	struct insert_anything: ctre::action {};
	struct insert_begin: ctre::action {};
	struct insert_end: ctre::action {};
	struct insert_range: ctre::action {};
	struct make_alternate: ctre::action {};
	struct make_capture: ctre::action {};
	struct make_capture_with_name: ctre::action {};
	struct make_lazy: ctre::action {};
	struct make_optional: ctre::action {};
	struct make_possessive: ctre::action {};
	struct make_sequence: ctre::action {};
	struct negate_class_named: ctre::action {};
	struct push_character: ctre::action {};
	struct push_hexdec: ctre::action {};
	struct push_name: ctre::action {};
	struct push_number: ctre::action {};
	struct repeat_ab: ctre::action {};
	struct repeat_at_least: ctre::action {};
	struct repeat_exactly: ctre::action {};
	struct repeat_plus: ctre::action {};
	struct repeat_star: ctre::action {};
	struct set_combine: ctre::action {};
	struct set_finish: ctre::action {};
	struct set_neg_start: ctre::action {};

// (q)LL1 function:
	using _others = ctre::neg_set<'$','\x28','\x29','*','+',',','-','.',':','<','>','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','[','\\','_','a','b','0',']','^','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','\x7B','|','\x7D','1','2','3','4','5','6','7','8','9'>;
	static constexpr auto rule(s, ctre::epsilon) -> ctre::epsilon;
	static constexpr auto rule(s, ctre::term<'\x28'>) -> ctre::push<ctre::anything, b, repeat, string2, content2>;
	static constexpr auto rule(s, ctre::term<'\\'>) -> ctre::push<ctre::anything, backslash, repeat, string2, content2>;
	static constexpr auto rule(s, ctre::term<'['>) -> ctre::push<ctre::anything, c, repeat, string2, content2>;
	static constexpr auto rule(s, ctre::term<'.'>) -> ctre::push<ctre::anything, insert_anything, repeat, string2, content2>;
	static constexpr auto rule(s, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, content2>;
	static constexpr auto rule(s, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, content2>;
	static constexpr auto rule(s, ctre::set<',','0','-',':','<','>','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',']','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character, repeat, string2, content2>;
	static constexpr auto rule(s, _others) -> ctre::push<ctre::anything, push_character, repeat, string2, content2>;
	static constexpr auto rule(s, ctre::set<'\x29','*','+','?','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(a, ctre::term<','>) -> ctre::push<ctre::anything, i>;
	static constexpr auto rule(a, ctre::term<'\x7D'>) -> ctre::push<repeat_exactly, ctre::anything>;

	static constexpr auto rule(b, ctre::term<'\x28'>) -> ctre::push<ctre::anything, b, repeat, string2, content2, make_capture, ctre::term<'\x29'>>;
	static constexpr auto rule(b, ctre::term<'\\'>) -> ctre::push<ctre::anything, backslash, repeat, string2, content2, make_capture, ctre::term<'\x29'>>;
	static constexpr auto rule(b, ctre::term<'['>) -> ctre::push<ctre::anything, c, repeat, string2, content2, make_capture, ctre::term<'\x29'>>;
	static constexpr auto rule(b, ctre::term<'.'>) -> ctre::push<ctre::anything, insert_anything, repeat, string2, content2, make_capture, ctre::term<'\x29'>>;
	static constexpr auto rule(b, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, content2, make_capture, ctre::term<'\x29'>>;
	static constexpr auto rule(b, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, content2, make_capture, ctre::term<'\x29'>>;
	static constexpr auto rule(b, ctre::term<'?'>) -> ctre::push<ctre::anything, j>;
	static constexpr auto rule(b, ctre::set<',','0','-',':','>','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',']','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character, repeat, string2, content2, make_capture, ctre::term<'\x29'>>;
	static constexpr auto rule(b, _others) -> ctre::push<ctre::anything, push_character, repeat, string2, content2, make_capture, ctre::term<'\x29'>>;
	static constexpr auto rule(b, ctre::term<'\x29'>) -> ctre::push<empty, make_capture, ctre::anything>;
	static constexpr auto rule(b, ctre::set<'*','+','<','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(backslash, ctre::term<'a'>) -> ctre::push<ctre::anything, character_alarm>;
	static constexpr auto rule(backslash, ctre::term<'e'>) -> ctre::push<ctre::anything, character_escape>;
	static constexpr auto rule(backslash, ctre::term<'f'>) -> ctre::push<ctre::anything, character_formfeed>;
	static constexpr auto rule(backslash, ctre::term<'n'>) -> ctre::push<ctre::anything, character_newline>;
	static constexpr auto rule(backslash, ctre::term<'0'>) -> ctre::push<ctre::anything, character_null>;
	static constexpr auto rule(backslash, ctre::term<'r'>) -> ctre::push<ctre::anything, character_return_carriage>;
	static constexpr auto rule(backslash, ctre::term<'t'>) -> ctre::push<ctre::anything, character_tab>;
	static constexpr auto rule(backslash, ctre::term<'d'>) -> ctre::push<ctre::anything, class_digit>;
	static constexpr auto rule(backslash, ctre::term<'D'>) -> ctre::push<ctre::anything, class_nondigit>;
	static constexpr auto rule(backslash, ctre::term<'N'>) -> ctre::push<ctre::anything, class_nonnewline>;
	static constexpr auto rule(backslash, ctre::term<'S'>) -> ctre::push<ctre::anything, class_nonspace>;
	static constexpr auto rule(backslash, ctre::term<'W'>) -> ctre::push<ctre::anything, class_nonword>;
	static constexpr auto rule(backslash, ctre::term<'s'>) -> ctre::push<ctre::anything, class_space>;
	static constexpr auto rule(backslash, ctre::term<'w'>) -> ctre::push<ctre::anything, class_word>;
	static constexpr auto rule(backslash, ctre::term<'x'>) -> ctre::push<ctre::anything, h>;
	static constexpr auto rule(backslash, ctre::set<'$','\x28','\x29','*','+','.','?','A','B','C','E','F','G','H','I','J','K','L','M','O','P','Q','U','V','X','Y','Z','[','\\','^','b','c','g','h','i','j','k','l','m','o','p','q','u','v','y','z','\x7B','|','\x7D','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character>;

	static constexpr auto rule(block_name2, ctre::term<'>'>) -> ctre::epsilon;
	static constexpr auto rule(block_name2, ctre::set<'0','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','_','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_name, block_name2>;

	static constexpr auto rule(block_name, ctre::set<'0','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','_','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_name, block_name2>;

	static constexpr auto rule(c, ctre::term<'\\'>) -> ctre::push<ctre::anything, backslash, set2, set_finish, ctre::term<']'>>;
	static constexpr auto rule(c, ctre::term<'['>) -> ctre::push<ctre::anything, ctre::term<':'>, f, set2, set_finish, ctre::term<']'>>;
	static constexpr auto rule(c, ctre::set<',','0','.','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character, range, set2, set_finish, ctre::term<']'>>;
	static constexpr auto rule(c, _others) -> ctre::push<ctre::anything, push_character, range, set2, set_finish, ctre::term<']'>>;
	static constexpr auto rule(c, ctre::term<'^'>) -> ctre::push<ctre::anything, set_neg_start, set, set_finish, ctre::term<']'>>;
	static constexpr auto rule(c, ctre::set<'$','\x28','\x29','*','+','-',':','<','>','?',']','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(class_named_name, ctre::term<'x'>) -> ctre::push<ctre::anything, ctre::term<'d'>, ctre::term<'i'>, ctre::term<'g'>, ctre::term<'i'>, ctre::term<'t'>, class_named_xdigit>;
	static constexpr auto rule(class_named_name, ctre::term<'d'>) -> ctre::push<ctre::anything, ctre::term<'i'>, ctre::term<'g'>, ctre::term<'i'>, ctre::term<'t'>, class_named_digit>;
	static constexpr auto rule(class_named_name, ctre::term<'b'>) -> ctre::push<ctre::anything, ctre::term<'l'>, ctre::term<'a'>, ctre::term<'n'>, ctre::term<'k'>, class_named_blank>;
	static constexpr auto rule(class_named_name, ctre::term<'c'>) -> ctre::push<ctre::anything, ctre::term<'n'>, ctre::term<'t'>, ctre::term<'r'>, ctre::term<'l'>, class_named_cntrl>;
	static constexpr auto rule(class_named_name, ctre::term<'w'>) -> ctre::push<ctre::anything, ctre::term<'o'>, ctre::term<'r'>, ctre::term<'d'>, class_named_word>;
	static constexpr auto rule(class_named_name, ctre::term<'l'>) -> ctre::push<ctre::anything, ctre::term<'o'>, ctre::term<'w'>, ctre::term<'e'>, ctre::term<'r'>, class_named_lower>;
	static constexpr auto rule(class_named_name, ctre::term<'s'>) -> ctre::push<ctre::anything, ctre::term<'p'>, ctre::term<'a'>, ctre::term<'c'>, ctre::term<'e'>, class_named_space>;
	static constexpr auto rule(class_named_name, ctre::term<'u'>) -> ctre::push<ctre::anything, ctre::term<'p'>, ctre::term<'p'>, ctre::term<'e'>, ctre::term<'r'>, class_named_upper>;
	static constexpr auto rule(class_named_name, ctre::term<'g'>) -> ctre::push<ctre::anything, ctre::term<'r'>, ctre::term<'a'>, ctre::term<'p'>, ctre::term<'h'>, class_named_graph>;
	static constexpr auto rule(class_named_name, ctre::term<'a'>) -> ctre::push<ctre::anything, d>;
	static constexpr auto rule(class_named_name, ctre::term<'p'>) -> ctre::push<ctre::anything, e>;

	static constexpr auto rule(content2, ctre::term<'\x29'>) -> ctre::epsilon;
	static constexpr auto rule(content2, ctre::epsilon) -> ctre::epsilon;
	static constexpr auto rule(content2, ctre::term<'|'>) -> ctre::push<ctre::anything, content, make_alternate>;

	static constexpr auto rule(content, ctre::term<'\x28'>) -> ctre::push<ctre::anything, b, repeat, string2, content2>;
	static constexpr auto rule(content, ctre::term<'\\'>) -> ctre::push<ctre::anything, backslash, repeat, string2, content2>;
	static constexpr auto rule(content, ctre::term<'['>) -> ctre::push<ctre::anything, c, repeat, string2, content2>;
	static constexpr auto rule(content, ctre::term<'.'>) -> ctre::push<ctre::anything, insert_anything, repeat, string2, content2>;
	static constexpr auto rule(content, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, content2>;
	static constexpr auto rule(content, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, content2>;
	static constexpr auto rule(content, ctre::set<',','0','-',':','<','>','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',']','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character, repeat, string2, content2>;
	static constexpr auto rule(content, _others) -> ctre::push<ctre::anything, push_character, repeat, string2, content2>;
	static constexpr auto rule(content, ctre::set<'\x29','*','+','?','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(content_in_capture, ctre::term<'\x28'>) -> ctre::push<ctre::anything, b, repeat, string2, content2>;
	static constexpr auto rule(content_in_capture, ctre::term<'\\'>) -> ctre::push<ctre::anything, backslash, repeat, string2, content2>;
	static constexpr auto rule(content_in_capture, ctre::term<'['>) -> ctre::push<ctre::anything, c, repeat, string2, content2>;
	static constexpr auto rule(content_in_capture, ctre::term<'.'>) -> ctre::push<ctre::anything, insert_anything, repeat, string2, content2>;
	static constexpr auto rule(content_in_capture, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, content2>;
	static constexpr auto rule(content_in_capture, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, content2>;
	static constexpr auto rule(content_in_capture, ctre::set<',','0','-',':','>','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',']','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character, repeat, string2, content2>;
	static constexpr auto rule(content_in_capture, _others) -> ctre::push<ctre::anything, push_character, repeat, string2, content2>;
	static constexpr auto rule(content_in_capture, ctre::term<'\x29'>) -> ctre::push<empty>;
	static constexpr auto rule(content_in_capture, ctre::set<'*','+','<','?','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(d, ctre::term<'s'>) -> ctre::push<ctre::anything, ctre::term<'c'>, ctre::term<'i'>, ctre::term<'i'>, class_named_ascii>;
	static constexpr auto rule(d, ctre::term<'l'>) -> ctre::push<ctre::anything, k>;

	static constexpr auto rule(e, ctre::term<'r'>) -> ctre::push<ctre::anything, ctre::term<'i'>, ctre::term<'n'>, ctre::term<'t'>, class_named_print>;
	static constexpr auto rule(e, ctre::term<'u'>) -> ctre::push<ctre::anything, ctre::term<'n'>, ctre::term<'c'>, ctre::term<'t'>, class_named_punct>;

	static constexpr auto rule(f, ctre::term<'^'>) -> ctre::push<ctre::anything, class_named_name, negate_class_named, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'x'>) -> ctre::push<ctre::anything, ctre::term<'d'>, ctre::term<'i'>, ctre::term<'g'>, ctre::term<'i'>, ctre::term<'t'>, class_named_xdigit, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'d'>) -> ctre::push<ctre::anything, ctre::term<'i'>, ctre::term<'g'>, ctre::term<'i'>, ctre::term<'t'>, class_named_digit, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'b'>) -> ctre::push<ctre::anything, ctre::term<'l'>, ctre::term<'a'>, ctre::term<'n'>, ctre::term<'k'>, class_named_blank, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'c'>) -> ctre::push<ctre::anything, ctre::term<'n'>, ctre::term<'t'>, ctre::term<'r'>, ctre::term<'l'>, class_named_cntrl, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'w'>) -> ctre::push<ctre::anything, ctre::term<'o'>, ctre::term<'r'>, ctre::term<'d'>, class_named_word, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'l'>) -> ctre::push<ctre::anything, ctre::term<'o'>, ctre::term<'w'>, ctre::term<'e'>, ctre::term<'r'>, class_named_lower, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'s'>) -> ctre::push<ctre::anything, ctre::term<'p'>, ctre::term<'a'>, ctre::term<'c'>, ctre::term<'e'>, class_named_space, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'u'>) -> ctre::push<ctre::anything, ctre::term<'p'>, ctre::term<'p'>, ctre::term<'e'>, ctre::term<'r'>, class_named_upper, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'g'>) -> ctre::push<ctre::anything, ctre::term<'r'>, ctre::term<'a'>, ctre::term<'p'>, ctre::term<'h'>, class_named_graph, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'a'>) -> ctre::push<ctre::anything, d, ctre::term<':'>, ctre::term<']'>>;
	static constexpr auto rule(f, ctre::term<'p'>) -> ctre::push<ctre::anything, e, ctre::term<':'>, ctre::term<']'>>;

	static constexpr auto rule(g, ctre::set<',','A','0','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, insert_range>;
	static constexpr auto rule(g, _others) -> ctre::push<ctre::anything, insert_range>;
	static constexpr auto rule(g, ctre::set<'$','\x28','\x29','*','+','-','.',':','<','>','?','[','\\',']','^','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(h, ctre::term<'\x7B'>) -> ctre::push<create_hexdec, ctre::anything, ctre::set<'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'>, push_hexdec, hexdec_repeat, ctre::term<'\x7D'>>;
	static constexpr auto rule(h, ctre::set<'0','A','B','C','D','E','F','a','b','c','d','e','f','1','2','3','4','5','6','7','8','9'>) -> ctre::push<create_hexdec, ctre::anything, push_hexdec, ctre::set<'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'>>;

	static constexpr auto rule(hexdec_repeat, ctre::term<'\x7D'>) -> ctre::epsilon;
	static constexpr auto rule(hexdec_repeat, ctre::set<'0','A','B','C','D','E','F','a','b','c','d','e','f','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_hexdec, hexdec_repeat>;

	static constexpr auto rule(i, ctre::set<'0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, create_number, number2, repeat_ab, ctre::term<'\x7D'>, mod>;
	static constexpr auto rule(i, ctre::term<'\x7D'>) -> ctre::push<repeat_at_least, ctre::anything, mod>;

	static constexpr auto rule(j, ctre::term<'<'>) -> ctre::push<ctre::anything, block_name, ctre::term<'>'>, content_in_capture, make_capture_with_name, ctre::term<'\x29'>>;
	static constexpr auto rule(j, ctre::term<':'>) -> ctre::push<ctre::anything, content_in_capture, ctre::term<'\x29'>>;

	static constexpr auto rule(k, ctre::term<'p'>) -> ctre::push<ctre::anything, ctre::term<'h'>, ctre::term<'a'>, class_named_alpha>;
	static constexpr auto rule(k, ctre::term<'n'>) -> ctre::push<ctre::anything, ctre::term<'u'>, ctre::term<'m'>, class_named_alnum>;

	static constexpr auto rule(mod, ctre::set<'$','\x28','\x29',',','-','.',':','<','>','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','[','\\',']','^','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','|','0','1','2','3','4','5','6','7','8','9'>) -> ctre::epsilon;
	static constexpr auto rule(mod, ctre::epsilon) -> ctre::epsilon;
	static constexpr auto rule(mod, _others) -> ctre::epsilon;
	static constexpr auto rule(mod, ctre::term<'?'>) -> ctre::push<ctre::anything, make_lazy>;
	static constexpr auto rule(mod, ctre::term<'+'>) -> ctre::push<ctre::anything, make_possessive>;
	static constexpr auto rule(mod, ctre::set<'*','_','\x7B','\x7D'>) -> ctre::reject;

	static constexpr auto rule(number2, ctre::set<',','\x7D'>) -> ctre::epsilon;
	static constexpr auto rule(number2, ctre::set<'0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_number, number2>;

	static constexpr auto rule(number, ctre::set<'0','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, create_number, number2>;

	static constexpr auto rule(range, ctre::set<',','.','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','[','\\',']','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'>) -> ctre::epsilon;
	static constexpr auto rule(range, ctre::epsilon) -> ctre::epsilon;
	static constexpr auto rule(range, _others) -> ctre::epsilon;
	static constexpr auto rule(range, ctre::term<'-'>) -> ctre::push<ctre::anything, g>;
	static constexpr auto rule(range, ctre::set<'$','\x28','\x29','*','+',':','<','>','?','^','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(repeat, ctre::set<'$','\x28','\x29',',','-','.',':','<','>','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','[','\\',']','^','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','|','0','1','2','3','4','5','6','7','8','9'>) -> ctre::epsilon;
	static constexpr auto rule(repeat, ctre::epsilon) -> ctre::epsilon;
	static constexpr auto rule(repeat, _others) -> ctre::epsilon;
	static constexpr auto rule(repeat, ctre::term<'?'>) -> ctre::push<ctre::anything, make_optional, mod>;
	static constexpr auto rule(repeat, ctre::term<'\x7B'>) -> ctre::push<ctre::anything, number, a>;
	static constexpr auto rule(repeat, ctre::term<'+'>) -> ctre::push<ctre::anything, repeat_plus, mod>;
	static constexpr auto rule(repeat, ctre::term<'*'>) -> ctre::push<ctre::anything, repeat_star, mod>;
	static constexpr auto rule(repeat, ctre::set<'_','\x7D'>) -> ctre::reject;

	static constexpr auto rule(set2, ctre::term<']'>) -> ctre::epsilon;
	static constexpr auto rule(set2, ctre::term<'\\'>) -> ctre::push<ctre::anything, backslash, set_combine, set2>;
	static constexpr auto rule(set2, ctre::term<'['>) -> ctre::push<ctre::anything, ctre::term<':'>, f, set_combine, set2>;
	static constexpr auto rule(set2, ctre::set<',','0','.','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character, range, set_combine, set2>;
	static constexpr auto rule(set2, _others) -> ctre::push<ctre::anything, push_character, range, set_combine, set2>;
	static constexpr auto rule(set2, ctre::set<'$','\x28','\x29','*','+','-',':','<','>','?','^','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(set, ctre::term<'\\'>) -> ctre::push<ctre::anything, backslash, set2>;
	static constexpr auto rule(set, ctre::term<'['>) -> ctre::push<ctre::anything, ctre::term<':'>, f, set2>;
	static constexpr auto rule(set, ctre::set<',','0','.','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character, range, set2>;
	static constexpr auto rule(set, _others) -> ctre::push<ctre::anything, push_character, range, set2>;
	static constexpr auto rule(set, ctre::set<'$','\x28','\x29','*','+','-',':','<','>','?',']','^','_','\x7B','|','\x7D'>) -> ctre::reject;

	static constexpr auto rule(string2, ctre::set<'\x29','|'>) -> ctre::epsilon;
	static constexpr auto rule(string2, ctre::epsilon) -> ctre::epsilon;
	static constexpr auto rule(string2, ctre::term<'\x28'>) -> ctre::push<ctre::anything, b, repeat, string2, make_sequence>;
	static constexpr auto rule(string2, ctre::term<'\\'>) -> ctre::push<ctre::anything, backslash, repeat, string2, make_sequence>;
	static constexpr auto rule(string2, ctre::term<'['>) -> ctre::push<ctre::anything, c, repeat, string2, make_sequence>;
	static constexpr auto rule(string2, ctre::term<'.'>) -> ctre::push<ctre::anything, insert_anything, repeat, string2, make_sequence>;
	static constexpr auto rule(string2, ctre::term<'^'>) -> ctre::push<ctre::anything, insert_begin, repeat, string2, make_sequence>;
	static constexpr auto rule(string2, ctre::term<'$'>) -> ctre::push<ctre::anything, insert_end, repeat, string2, make_sequence>;
	static constexpr auto rule(string2, ctre::set<',','0','-',':','<','>','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',']','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9'>) -> ctre::push<ctre::anything, push_character, repeat, string2, make_sequence>;
	static constexpr auto rule(string2, _others) -> ctre::push<ctre::anything, push_character, repeat, string2, make_sequence>;
	static constexpr auto rule(string2, ctre::set<'*','+','?','_','\x7B','\x7D'>) -> ctre::reject;

};

}

#endif //CTRE__PCRE__HPP
