#ifndef CTRE__SIMPLE__HPP
#define CTRE__SIMPLE__HPP

// THIS FILE WAS GENERATED BY DESATOMAT TOOL, DO NOT MODIFY THIS FILE

namespace ctre {

struct simple {

// NONTERMINALS:
	struct escape {};
	struct mod {};
	struct opt2 {};
	struct opt {};
	struct s {}; using _start = s;
	struct seq2 {};
	struct seq {};

// 'action' types:
	struct alpha: ctll::action {};
	struct alt: ctll::action {};
	struct character: ctll::action {};
	struct digit: ctll::action {};
	struct optional: ctll::action {};
	struct plus: ctll::action {};
	struct sequence: ctll::action {};
	struct space: ctll::action {};
	struct star: ctll::action {};

// (q)LL1 function:
	using _others = ctll::neg_set<'(',')','*','+','?','\\','|'>;
	static constexpr auto rule(s, ctll::epsilon) -> ctll::epsilon;
	static constexpr auto rule(s, _others) -> ctll::push<ctll::anything, character, mod, seq2, opt2>;
	static constexpr auto rule(s, ctll::term<'\\'>) -> ctll::push< ctll::anything, escape, mod, seq2, opt2 >;
	static constexpr auto rule(s, ctll::term<'('>) -> ctll::push<ctll::anything, opt, ctll::term<')'>, mod, seq2, opt2>;
	static constexpr auto rule(s, ctll::set<')','*','+','?','|'>) -> ctll::reject;

	static constexpr auto rule(escape, ctll::term<'a'>) -> ctll::push<ctll::anything, alpha>;
	static constexpr auto rule(escape, ctll::term<'d'>) -> ctll::push<ctll::anything, digit>;
	static constexpr auto rule(escape, ctll::term<'s'>) -> ctll::push<ctll::anything, space>;
	
	static constexpr auto rule(mod, ctll::set<'(',')','\\','|'>) -> ctll::epsilon;
	static constexpr auto rule(mod, ctll::epsilon) -> ctll::epsilon;
	static constexpr auto rule(mod, _others) -> ctll::epsilon;
	static constexpr auto rule(mod, ctll::term<'?'>) -> ctll::push<ctll::anything, optional>;
	static constexpr auto rule(mod, ctll::term<'+'>) -> ctll::push<ctll::anything, plus>;
	static constexpr auto rule(mod, ctll::term<'*'>) -> ctll::push<ctll::anything, star>;

	static constexpr auto rule(opt2, ctll::term<')'>) -> ctll::epsilon;
	static constexpr auto rule(opt2, ctll::epsilon) -> ctll::epsilon;
	static constexpr auto rule(opt2, ctll::term<'|'>) -> ctll::push<ctll::anything, seq, alt, opt2>;

	static constexpr auto rule(opt, _others) -> ctll::push<ctll::anything, character, mod, seq2, opt2>;
	static constexpr auto rule(opt, ctll::term<'\\'>) -> ctll::push<ctll::anything, escape, mod, seq2, opt2>;
	static constexpr auto rule(opt, ctll::term<'('>) -> ctll::push<ctll::anything, opt, ctll::term<')'>, mod, seq2, opt2>;
	static constexpr auto rule(opt, ctll::set<')','*','+','?','|'>) -> ctll::reject;

	static constexpr auto rule(seq2, ctll::set<')','|'>) -> ctll::epsilon;
	static constexpr auto rule(seq2, ctll::epsilon) -> ctll::epsilon;
	static constexpr auto rule(seq2, _others) -> ctll::push<ctll::anything, character, sequence, mod, seq2>;
	static constexpr auto rule(seq2, ctll::term<'\\'>) -> ctll::push<ctll::anything, escape, sequence, mod, seq2>;
	static constexpr auto rule(seq2, ctll::term<'('>) -> ctll::push<ctll::anything, opt, ctll::term<')'>, sequence, mod, seq2>;
	static constexpr auto rule(seq2, ctll::set<'*','+','?'>) -> ctll::reject;

	static constexpr auto rule(seq, _others) -> ctll::push<ctll::anything, character, mod, seq2>;
	static constexpr auto rule(seq, ctll::term<'\\'>) -> ctll::push<ctll::anything, escape, mod, seq2>;
	static constexpr auto rule(seq, ctll::term<'('>) -> ctll::push<ctll::anything, opt, ctll::term<')'>, mod, seq2>;
	static constexpr auto rule(seq, ctll::set<')','*','+','?','|'>) -> ctll::reject;

};

}

#endif //CTRE__SIMPLE__HPP
