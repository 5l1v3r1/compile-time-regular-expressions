#ifndef CTRE__BRAINFUCK__HPP
#define CTRE__BRAINFUCK__HPP

// THIS FILE WAS GENERATED BY DESATOMAT TOOL, DO NOT MODIFY THIS FILE

namespace ctbf {

struct brainfuck {

// NONTERMINALS:
	struct s {}; using _start = s;
	struct sequence2 {};
	struct sequence {};

// 'action' types:
	struct empty: ctll::action {};
	struct getchar: ctll::action {};
	struct make_program: ctll::action {};
	struct make_sequence: ctll::action {};
	struct minus: ctll::action {};
	struct plus: ctll::action {};
	struct ptr_dec: ctll::action {};
	struct ptr_inc: ctll::action {};
	struct putchar: ctll::action {};
	struct while_end: ctll::action {};
	struct while_start: ctll::action {};

// (q)LL1 function:
	using _others = ctll::neg_set<'+',',','-','.','<','>','[',']'>;
	static constexpr auto rule(s, ctll::term<','>) -> ctll::push<ctll::anything, getchar, sequence2, make_program>;
	static constexpr auto rule(s, ctll::term<'-'>) -> ctll::push<ctll::anything, minus, sequence2, make_program>;
	static constexpr auto rule(s, ctll::term<'+'>) -> ctll::push<ctll::anything, plus, sequence2, make_program>;
	static constexpr auto rule(s, ctll::term<'<'>) -> ctll::push<ctll::anything, ptr_dec, sequence2, make_program>;
	static constexpr auto rule(s, ctll::term<'>'>) -> ctll::push<ctll::anything, ptr_inc, sequence2, make_program>;
	static constexpr auto rule(s, ctll::term<'.'>) -> ctll::push<ctll::anything, putchar, sequence2, make_program>;
	static constexpr auto rule(s, _others) -> ctll::push<ctll::anything, sequence, make_program>;
	static constexpr auto rule(s, ctll::term<'['>) -> ctll::push<ctll::anything, while_start, sequence, ctll::term<']'>, while_end, sequence2, make_program>;
	static constexpr auto rule(s, ctll::epsilon) -> ctll::push<empty, make_program>;
	static constexpr auto rule(s, ctll::term<']'>) -> ctll::reject;

	static constexpr auto rule(sequence2, ctll::term<']'>) -> ctll::epsilon;
	static constexpr auto rule(sequence2, ctll::epsilon) -> ctll::epsilon;
	static constexpr auto rule(sequence2, ctll::term<','>) -> ctll::push<ctll::anything, getchar, make_sequence, sequence2>;
	static constexpr auto rule(sequence2, ctll::term<'-'>) -> ctll::push<ctll::anything, minus, make_sequence, sequence2>;
	static constexpr auto rule(sequence2, ctll::term<'+'>) -> ctll::push<ctll::anything, plus, make_sequence, sequence2>;
	static constexpr auto rule(sequence2, ctll::term<'<'>) -> ctll::push<ctll::anything, ptr_dec, make_sequence, sequence2>;
	static constexpr auto rule(sequence2, ctll::term<'>'>) -> ctll::push<ctll::anything, ptr_inc, make_sequence, sequence2>;
	static constexpr auto rule(sequence2, ctll::term<'.'>) -> ctll::push<ctll::anything, putchar, make_sequence, sequence2>;
	static constexpr auto rule(sequence2, _others) -> ctll::push<ctll::anything, sequence2>;
	static constexpr auto rule(sequence2, ctll::term<'['>) -> ctll::push<ctll::anything, while_start, sequence, ctll::term<']'>, while_end, make_sequence, sequence2>;

	static constexpr auto rule(sequence, ctll::term<','>) -> ctll::push<ctll::anything, getchar, sequence2>;
	static constexpr auto rule(sequence, ctll::term<'-'>) -> ctll::push<ctll::anything, minus, sequence2>;
	static constexpr auto rule(sequence, ctll::term<'+'>) -> ctll::push<ctll::anything, plus, sequence2>;
	static constexpr auto rule(sequence, ctll::term<'<'>) -> ctll::push<ctll::anything, ptr_dec, sequence2>;
	static constexpr auto rule(sequence, ctll::term<'>'>) -> ctll::push<ctll::anything, ptr_inc, sequence2>;
	static constexpr auto rule(sequence, ctll::term<'.'>) -> ctll::push<ctll::anything, putchar, sequence2>;
	static constexpr auto rule(sequence, _others) -> ctll::push<ctll::anything, sequence>;
	static constexpr auto rule(sequence, ctll::term<'['>) -> ctll::push<ctll::anything, while_start, sequence, ctll::term<']'>, while_end, sequence2>;
	static constexpr auto rule(sequence, ctll::term<']'>) -> ctll::push<empty>;
	static constexpr auto rule(sequence, ctll::epsilon) -> ctll::push<empty>;

};

}

#endif //CTRE__BRAINFUCK__HPP
